version: "3.8"

services:
  # SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - corporate_network

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686" # UI
      - "6831:6831/udp" # Agent
      - "14268:14268" # Collector
    networks:
      - corporate_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - corporate_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - corporate_network

  # Corporate Portal API
  corporate-api:
    build:
      context: .
      dockerfile: CorporatePortalApi/Dockerfile
    ports:
      - "6000:6000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:6000
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=CorporatePortal;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - Jaeger__Host=jaeger
      - Jaeger__Port=6831
    depends_on:
      - sqlserver
      - jaeger
    networks:
      - corporate_network

  # Load Testing Service
  load-tester:
    build:
      context: ./load-tester
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://corporate-api:6000
    depends_on:
      - corporate-api
    networks:
      - corporate_network

volumes:
  sqlserver_data:
  prometheus_data:
  grafana_data:

networks:
  corporate_network:
    driver: bridge
